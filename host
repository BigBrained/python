import socket

# --- Game Logic ---
board = [0]*9   # 0=empty, 1=host(x), -1=client(o)

winning_lines = [
    (0,1,2),(3,4,5),(6,7,8),  # rows
    (0,3,6),(1,4,7),(2,5,8),  # cols
    (0,4,8),(2,4,6)           # diags
]

def render_board(b):
    # show numbers for empty squares
    def cell(i):
        if b[i]==1:  return 'x'
        if b[i]==-1: return 'o'
        return str(i+1)
    rows = [
        f"{cell(0)}|{cell(1)}|{cell(2)}",
        f"{cell(3)}|{cell(4)}|{cell(5)}",
        f"{cell(6)}|{cell(7)}|{cell(8)}",
    ]
    return "\n".join(rows)

def check_winner(b):
    for a,b1,c in winning_lines:
        if b[a]==b[b1]==b[c] and b[a]!=0:
            return b[a]
    if all(s!=0 for s in b):
        return 0  # draw
    return None  # game continues

# --- Networking Setup ---
HOST = '0.0.0.0'
PORT = 12345
srv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
srv.bind((HOST, PORT))
srv.listen(1)
print("[HOST] Waiting for client...")
conn, addr = srv.accept()
print(f"[HOST] Client connected from {addr}")

# --- Game Loop ---
player = 1  # 1=host turn, -1=client turn

while True:
    board_txt = render_board(board)
    if player == 1:
        # HOST TURN
        print("\nYour board:")
        print(board_txt)
        try:
            choice = int(input("Your move, select square (1-9): ")) - 1
        except:
            print("Invalid input.")
            continue
    else:
        # CLIENT TURN: send board & prompt, then recv choice
        msg = board_txt + "\nYour move, select square (1-9): "
        conn.sendall(msg.encode())
        data = conn.recv(1024).decode().strip()
        try:
            choice = int(data) - 1
        except:
            print("Client sent bad input, ending.")
            break

    # validate move
    if not (0 <= choice < 9) or board[choice] != 0:
        if player == 1:
            print("Invalid move, try again.")
        continue

    board[choice] = player

    # check for win/draw
    res = check_winner(board)
    if res is not None:
        final = render_board(board) + "\n"
        if res == 1:
            result_msg = final + "Host (x) wins!"
        elif res == -1:
            result_msg = final + "Client (o) wins!"
        else:
            result_msg = final + "It's a draw!"
        # send final board & result
        conn.sendall(result_msg.encode())
        print("\n" + result_msg)
        break

    player *= -1  # switch turn

conn.close()
srv.close()
